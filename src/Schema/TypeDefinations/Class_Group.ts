import {GraphQLObjectType , GraphQLID , GraphQLString , GraphQLInt , GraphQLList} from 'graphql'
import { AttendanceType } from './Attendance';
import { ScheduleType } from './Schedule';
import { TimeTableType } from './Time_Table';
import { CourseType } from './Course';
import { GradeType } from './Grade';
import {StudentType} from './Student';
import { TeacherType } from './Teacher';
// autogenerated code check once
export const ClassGroupType:any = new GraphQLObjectType({
        name: 'ClassGroup',
        fields: () => ({
                Class_Group_ID: {type: GraphQLID},
                Classroom_Number: {type: GraphQLInt},
                Year: {type: GraphQLInt},
                Semester: {type: GraphQLInt},
                Teacher: {type: TeacherType},
                // Course_Code: {type: GraphQLID},
                // PRIMARY KEY (Class_Group_ID)
                // FOREIGN KEY (Teacher_SAP_ID) REFERENCES Teacher (SAP_ID),
                // FOREIGN KEY (Course_Code) REFERENCES Course (Course_Code)
                Course_Code: {type: CourseType},
                Students: {type: new GraphQLList(StudentType)},
                Grades: {type: new GraphQLList(GradeType)},
                Attendances: {type: new GraphQLList(AttendanceType)},
                Schedule: {type: new GraphQLList(ScheduleType)},
                Time_Table: {type: new GraphQLList(TimeTableType)},
        }),
})

// export const Group = new GraphQLObjectType({
//     name: 'Group',
//     fields: () => ({
//         Class_Group_ID: {type: GraphQLID},
//         Classroom_Number: {type: GraphQLInt},
//         Year: {type: GraphQLInt},
//         Semester: {type: GraphQLInt},
//         Teacher_SAP_ID: {type: GraphQLID},
//         Course_Code: {type: GraphQLID},
//         // PRIMARY KEY (Class_Group_ID)
//         // FOREIGN KEY (Teacher_SAP_ID) REFERENCES Teacher (SAP_ID),
//         // FOREIGN KEY (Course_Code) REFERENCES Course (Course_Code)
//     })
// })





//see this if the ohter methord dosent work 
// import {getConnection} from "typeorm";

// const student = 

// await getConnection()
//     .createQueryBuilder()
//     .relation(Class_Group, "Students")
//     .of(Class_Group)
//     .add(student);